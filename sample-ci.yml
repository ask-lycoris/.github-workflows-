# .github/workflows/sample-ci.yml

# ワークフローの名前 (GitHubのActionsタブで表示される)
name: Node.js CI

# ワークフローが実行されるトリガーを指定
on:
  push: # いずれかのブランチにpushされた時
    branches: [ "main", "develop" ] # main または develop ブランチへのpush時に実行
  pull_request: # いずれかのブランチへのPull Requestが作成/更新された時
    branches: [ "main", "develop" ] # main または develop ブランチへのPR時に実行

# 実行されるジョブを定義
jobs:
  # ジョブのID (任意の名前、ここでは 'build' とする)
  build:
    # ジョブ名 (GitHub UIで表示される)
    name: Build and Test
    # ジョブを実行する仮想環境の種類 (Ubuntuの最新版を使用)
    runs-on: ubuntu-latest

    # ジョブ内で実行されるステップ (上から順に実行)
    steps:
      # ステップ1: リポジトリのコードをチェックアウトする
      # これにより仮想環境内にコードがコピーされる
      - name: Checkout repository code
        uses: actions/checkout@v4 # GitHub公式のチェックアウトアクションを使用

      # ステップ2: 使用するNode.jsのバージョンをセットアップする
      # プロジェクトで使用している言語に合わせてアクションを選ぶ
      - name: Setup Node.js environment
        uses: actions/setup-node@v4 # Node.jsセットアップアクションを使用
        with:
          node-version: '20.x' # 使用したいNode.jsのバージョンを指定
          cache: 'npm' # npmのキャッシュを有効にしてビルドを高速化

      # ステップ3: 依存パッケージをインストールする
      # プロジェクトのパッケージマネージャに合わせてコマンドを変更する
      - name: Install dependencies
        run: npm ci # package-lock.jsonに基づいて依存関係を正確にインストール

      # ステップ4: コードのビルドを実行する (ビルドプロセスがない場合は不要)
      # プロジェクトのビルドスクリプトに合わせてコマンドを変更する
      - name: Build project
        run: npm run build --if-present # package.jsonにbuildスクリプトがあれば実行

      # ステップ5: テストを実行する
      # プロジェクトのテストコマンドに合わせて変更する
      - name: Run tests
        run: npm test # package.jsonのtestスクリプトを実行
